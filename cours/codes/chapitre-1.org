#+STARTUP: overview indent
#+auto_tangle: t

#+BEGIN_SRC bash :results silent :exports none :async t
  python3 -m venv /tmp/econometrics
  source /tmp/econometrics/bin/activate
  pip install pandas openpyxl numpy matplotlib scipy
#+END_SRC

#+BEGIN_SRC elisp :results none :exports none
  (setq org-babel-python-command "/tmp/econometrics/bin/python")
#+END_SRC

* Échantillons déterministes versus stochastiques
#+begin_src python :results none :session :exports code :tangle "./chapitre-1/deterministic-versus-stochastic-samples.py"
  import numpy as np

  rng = np.random.default_rng(2211)

  N = 100                            # Nombre d'échantillons
  T = 10                             # Taille de chaque échantillon

  def y(x, ε):
      return x+ε

  x = 10*rng.uniform(size=(T,1))     # Variable exogène déterminsite (utilisée pour YD)

  ϵ = rng.normal(size=(T,N))         # Tableau où seront stockés les résidus pour les N échantillons

  YD = np.zeros((T,N))               # N échantillons (pour y) avec variable exogène déterministe
  YS = np.zeros((T,N))               # N échantillons (pour y) avec variable exogène stochastique
  XS = np.zeros((T,N))               # N échantillons (pour x) avec variable exogène stochastique

  for i in range(N):
      YD[:,i] = y(x, ϵ[:,i])[:,0]
      XS[:,i] = 10*rng.uniform(size=(T,1))[:,0]
      YS[:,i] = y(XS[:,i], ϵ[:,i])

  import matplotlib.pyplot as plt

  #
  # Représentation graphique d''échantillons avec variable exogène déterministe
  #

  fig, ax = plt.subplots()

  for i in range(N):
      ax.scatter(x, YD[:,i], marker='o', facecolors='none', edgecolor='black')

  plt.savefig('sample-nonstochastic-x.tex', format='pgf')

  #
  # Représentation graphique d''échantillons avec variable exogène stochastique
  #

  fig, ax = plt.subplots()

  for i in range(N):
      ax.scatter(XS[:,i], YS[:,i], marker='o', facecolors='none', edgecolor='black')

  plt.savefig('sample-stochastic-x.tex', format='pgf')

  #
  # Un peu de ménage
  #

  from shutil import move

  move('sample-nonstochastic-x.tex', '../images/chapitre-1/sample-nonstochastic-x.tex')
  move('sample-stochastic-x.tex', '../images/chapitre-1/sample-stochastic-x.tex')

#+end_src
* Échantillons d'Anscombe (1973)

#+begin_src python :results none :session :exports code :tangle "chapitre-1/anscombe-samples.py"
  import pandas as pd
  import numpy as np
  import scipy.stats as stats
  import matplotlib.pyplot as plt

  def plot(ax, x, y, title=''):
    """
    Représente y contre x, ainsi que la droite de régression
    """

    assert np.shape(x) == np.shape(y), "Données pour x et y incompatibles."

    regression = stats.linregress(x, y)


    # Données et coefficient de détermination
    ax.scatter(x, y,  marker='o', facecolors='none', edgecolor='black')#, label=f"R^2 = {regression.rvalue**2:.2f}")

    # Linear regression
    xx = np.array([0, 20])
    yy = regression.slope * xx + regression.intercept
    ax.plot(xx, yy, 'r-', label=f"y = {regression.slope:.2f} x + {regression.intercept:.2f}")

    # Légende
    leg = ax.legend(loc='upper left', fontsize='small')

    # Titre
    if title:
      ax.set_title(title)

    subplot = ax.get_subplotspec()

    if subplot.is_last_row():
      ax.set_xlabel("x")

    if subplot.is_first_col():
      ax.set_ylabel("y")

    return regression


  fig = plt.figure()

  # Lecture des quatre échantillons
  data = pd.read_csv('../data/chapitre-1/anscombe.csv')

  ax = fig.add_subplot(2, 2, 1)
  x = data[data.dataset=='I'].x
  y = data[data.dataset=='I'].y
  plot(ax, x, y, title=f'I')

  ax = fig.add_subplot(2, 2, 2)
  x = data[data.dataset=='II'].x
  y = data[data.dataset=='II'].y
  plot(ax, x, y, title=f'II')

  ax = fig.add_subplot(2, 2, 3)
  x = data[data.dataset=='III'].x
  y = data[data.dataset=='III'].y
  plot(ax, x, y, title=f'III')

  ax = fig.add_subplot(2, 2, 4)
  x = data[data.dataset=='IV'].x
  y = data[data.dataset=='IV'].y
  regression = plot(ax, x, y, title=f'IV')

  # fig.suptitle(f"Les quatre échantillons d'Anscombe ($R^2 = {regression.rvalue**2:.2f}$)", fontsize='x-large')
  fig.tight_layout()

  plt.savefig('../images/chapitre-1/anscombe.tex', format='pgf')

#+end_src
* Distribution de l'estimateur des MCO
#+begin_src python :results none :session :exports code :tangle "./chapitre-1/estimator-with-deterministic-versus-stochastic-samples.py"
  import numpy as np

  rng = np.random.default_rng(2211)

  N = 100000                         # Nombre d'échantillons
  T = 10                             # Taille de chaque échantillon

  def y(x, ε):
      return x+ε

  xd = 10*rng.uniform(size=T)        # Variable exogène déterminsite (utilisée pour YD)

  ϵ = rng.normal(size=(T,N))         # Tableau où seront stockés les résidus pour les N échantillons

  Bd = np.zeros(N)
  Bs = np.zeros(N)

  for i in range(N):
      yd = y(xd, ϵ[:,i])
      Bd[i] = np.dot(yd-np.mean(yd), xd-np.mean(xd))/np.dot(xd-np.mean(xd), xd-np.mean(xd))
      xs = 10*rng.uniform(size=T)
      ys = y(xs, ϵ[:,i])
      Bs[i] = np.dot(ys-np.mean(ys), xs-np.mean(xs))/np.dot(xs-np.mean(xs), xs-np.mean(xs))

  import matplotlib.pyplot as plt

  #
  # Histogramme pour la distribution empirique de l'estimateur de la pente quand la variable exogène
  # est déterministe.
  #

  fig, ax = plt.subplots()
  ax.hist(Bd, bins='auto', density=True, histtype='step')
  #ax.plot(Bd, 0*Bd, marker='o')
  plt.savefig('../images/chapitre-1/slope-estimate-sample-nonstochastic-x.tex', format='pgf')

  #
  # Histogramme pour la distribution empirique de l'estimateur de la pente quand la variable exogène
  # est stochastique.
  #

  fig, ax = plt.subplots()
  ax.hist(Bs, bins='auto', density=True, histtype='step')
  #ax.plot(Bs, 0*Bd, 'o')
  plt.savefig('../images/chapitre-1/slope-estimate-sample-stochastic-x.tex', format='pgf')

#+end_src




* Done
#+BEGIN_SRC bash :results silent :exports none
  touch chapitre-1.log
#+END_SRC
